# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19l8cnNl6aIoSZe6O4QtOEl75hCQILLuE
"""

# Commented out IPython magic to ensure Python compatibility.
#Haris Amaldi
#Dilarang mengcopy code. PLAGIARISME ITU HARAM!
#Mengimpor library yang dibutuhkan
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

#Membuka data yang dibutuhkan
asuransi = pd.read_csv('insurance.csv')
asuransi

#Mencari informasi dari data
asuransi.info()

#Deskripsi data
asuransi.describe()

#Mencari data yang sengklek
sns.boxplot(x=asuransi['age'])

sns.boxplot(x=asuransi['bmi'])

sns.boxplot(x=asuransi['children'])

#Membuang data yang sengklek
Q1 = asuransi.quantile(0.25)
Q3 = asuransi.quantile(0.75)
IQR=Q3-Q1
asuransi=asuransi[~((asuransi<(Q1-1.5*IQR))|(asuransi>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita hilangkan beberapa data yang diluar trend
asuransi.shape

numerical_features = ['age', 'bmi', 'children', 'charge']
categorical_features = ['sex', 'smoker', 'region']

#Melihat kondisi data sample
feature = categorical_features[0]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

feature = categorical_features[1]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

feature = categorical_features[2]
count = asuransi[feature].value_counts()
percent = 100*asuransi[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

#Melihat persebaran data
asuransi.hist(bins=50, figsize=(20,15))
plt.show()

#Membuat kurva hubungan antara berbagai variabel terhadap harga dan melihat hubungannya dengan biaya asuransi
cat_features = asuransi.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="charges", kind="bar", dodge=False, height = 4, aspect = 3,  data=asuransi, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

sns.pairplot(asuransi, diag_kind = 'kde')

#Mencari korelasi antar variabel angka
plt.figure(figsize=(10, 8))
correlation_matrix = asuransi.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

#Menghapus data jumlah anak karena tidak berkorelasi pada data apapun
asuransi.drop(['children'], inplace=True, axis=1)
asuransi.head()

#Menerjemah yes no agar bisa dibaca oleh kode ML
from sklearn.preprocessing import  OneHotEncoder
asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['sex'], prefix='sex')],axis=1)
asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['smoker'], prefix='smoker')],axis=1)
asuransi = pd.concat([asuransi, pd.get_dummies(asuransi['region'], prefix='region')],axis=1)
asuransi.drop(['sex','smoker','region'], axis=1, inplace=True)
asuransi.head()

sns.pairplot(asuransi[['age','bmi']], plot_kws={"s": 3});

#Karena cukup berkorelasi, gabungkan umur dan bmi jadi faktor baru bernama "Faktor Kesehatan"
from sklearn.decomposition import PCA
 
pca = PCA(n_components=2, random_state=123)
pca.fit(asuransi[['age','bmi']])
princ_comp = pca.transform(asuransi[['age','bmi']])

pca.explained_variance_ratio_.round(2)

from sklearn.decomposition import PCA
pca = PCA(n_components=1, random_state=123)
pca.fit(asuransi[['age','bmi']])
asuransi['faktor kesehatan'] = pca.transform(asuransi.loc[:, ('age','bmi')]).flatten()
asuransi.drop(['age','bmi'], axis=1, inplace=True)

#Memisahkan data latih dan data uji
from sklearn.model_selection import train_test_split
 
X = asuransi.drop(["charges"],axis =1)
y = asuransi["charges"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

#Melihat jumlah data, data latih, dan data uji
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

#Standarisasi faktor kesehatan
from sklearn.preprocessing import StandardScaler
 
numerical_features = ['faktor kesehatan']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

# Impor library yang dibutuhkan
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error
# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])
# buat model prediksi KNN
knn = KNeighborsRegressor(n_neighbors=3)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# buat model prediksi Random forest
RF = RandomForestRegressor(n_estimators=100, max_depth=25, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

#Buat model boosting
boosting = AdaBoostRegressor(learning_rate=0.001, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

#Melihat hasil prediksi
prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

#Ketelitian pada hasil prediksi KNN lebih baik daripada RF dan Boosting. Pada kasus ini, saya pakai KNN.